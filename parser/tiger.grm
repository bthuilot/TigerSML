structure A = Absyn
type pos = int
		 and symbol = Symbol.symbol

%%

%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | LOWEST

%nonterm  exp of A.exp 
        | program of A.exp
        | decs of A.dec list
					(* | dec of A.dec *)
        | tydec of {name: symbol, ty: A.ty, pos: pos}
        | tydecs of {name: symbol, ty: A.ty, pos: pos} list
        | vardec of A.dec
        | fundec of A.fundec
        | fundecs of A.fundec list
        | ty of A.ty
        | tyfields of A.field list
        | tyfields' of A.field list
        | lvalue of A.var
        | recordfields of (symbol * A.exp * pos) list
        | funparams of A.exp list
        | expseq of (A.exp * pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF


%name Tiger

								(* Auxillary non-term denoting the lowest possbile precedence *)
%nonassoc LOWEST
								(* Functions and Types must have a higher precedence than the lowest in order to shift decl lists *)
%nonassoc FUNCTION TYPE

								(* Shift ELSE to solve dangling ELSE problem *)
%nonassoc THEN
								(* We group DO, OF, and ID in here since they don't collide with each other *)
%nonassoc ELSE DO OF ID
								(* Left bracket must be higher than ID in order to shift array access and creation *)
%nonassoc LBRACK

								(* The following are defined in the textbook *)
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%

program	: exp				(exp)

decs :               (nil)
		 | fundecs decs (A.FunctionDec fundecs :: decs)
		 | vardec  decs     (vardec :: decs)
		 | tydecs decs  (A.TypeDec tydecs :: decs)

tydec : TYPE ID EQ ty ({name=Symbol.symbol ID, ty=ty, pos=TYPEleft:pos})

tydecs : tydec %prec LOWEST  ([tydec])
							 | tydec tydecs (tydec :: tydecs)

ty : ID                    (A.NameTy (Symbol.symbol ID, IDleft))
   | LBRACE tyfields RBRACE (A.RecordTy tyfields)
   | ARRAY OF ID            (A.ArrayTy (Symbol.symbol ID, IDleft))

tyfields :    (nil)
				 | tyfields' (tyfields')

tyfields' : ID COLON ID         ([{name=Symbol.symbol ID1,
                                   escape=ref false,
                                   typ=Symbol.symbol ID2,
                                   pos=ID1left:pos}])
					| ID COLON ID COMMA tyfields' ({name=Symbol.symbol ID1,
																					escape=ref false,
																					typ=Symbol.symbol ID2,
																					pos=ID1left:pos} :: tyfields')

vardec : VAR ID ASSIGN exp        (A.VarDec {name=Symbol.symbol ID,
                                             escape=ref false,
                                             typ=NONE,
                                             init=exp,
                                             pos=VARleft:pos})
			 | VAR ID COLON ID ASSIGN exp    (A.VarDec {name=Symbol.symbol ID1,
																									escape=ref false,
																									typ=SOME((Symbol.symbol ID2, ID2left)),
																									init=exp,
																									pos=VARleft:pos})

fundecs : fundec %prec LOWEST    ([fundec])
								 | fundec fundecs (fundec :: fundecs)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp        ({name=Symbol.symbol ID,
                                                            params=tyfields,
                                                            result=NONE:(symbol*pos) option,
                                                            body=exp,
                                                            pos=FUNCTIONleft:pos})
			 | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp    ({name=Symbol.symbol ID1,
																																 params=tyfields,
																																 result=SOME(Symbol.symbol ID2, ID2left),
																																 body=exp,
																																 pos=FUNCTIONleft:pos})

lvalue : ID                         (A.SimpleVar (Symbol.symbol ID, IDleft))
			 | lvalue DOT ID                   (A.FieldVar (lvalue, Symbol.symbol ID, lvalueleft))
			 | lvalue LBRACK exp RBRACK        (A.SubscriptVar (lvalue, exp, lvalueleft))
			 | ID LBRACK exp RBRACK            (A.SubscriptVar ((A.SimpleVar (Symbol.symbol ID, IDleft)), exp, IDleft))
						
exp : lvalue (A.VarExp lvalue)
								(* ArtOp *)
		| exp PLUS exp                    (A.OpExp {left = exp1, oper=A.PlusOp, right=exp2, pos=exp1left:pos})
		| exp MINUS exp                   (A.OpExp {left = exp1, oper=A.MinusOp, right=exp2, pos=exp1left:pos})
		| exp TIMES exp                   (A.OpExp {left = exp1, oper=A.TimesOp, right=exp2, pos=exp1left:pos})
		| exp DIVIDE exp                  (A.OpExp {left = exp1, oper=A.DivideOp, right=exp2, pos=exp1left:pos})
		| MINUS exp %prec UMINUS          (A.OpExp {left = A.IntExp(0), oper=A.MinusOp, right=exp, pos=exp1left:pos})

								(* CompOp *)
								| exp EQ exp                      (A.OpExp {left = exp1, oper=A.EqOp, right=exp2, pos=exp1left:pos})
								| exp NEQ exp                     (A.OpExp {left = exp1, oper=A.NeqOp, right=exp2, pos=exp1left:pos})
								| exp GT exp                      (A.OpExp {left = exp1, oper=A.GtOp, right=exp2, pos=exp1left:pos})
								| exp LT exp                      (A.OpExp {left = exp1, oper=A.LtOp, right=exp2, pos=exp1left:pos})
								| exp GE exp                      (A.OpExp {left = exp1, oper=A.GeOp, right=exp2, pos=exp1left:pos})
								| exp LE exp                      (A.OpExp {left = exp1, oper=A.LeOp, right=exp2, pos=exp1left:pos})

								(* BinOp *)
								| exp AND exp                     (A.IfExp {test = exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left:pos})
								| exp OR exp                      (A.IfExp {test = exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left:pos:pos})

								| NIL                             (A.NilExp)
								| INT                             (A.IntExp INT)
								| STRING                          (A.StringExp (STRING, STRINGleft))
								| LPAREN RPAREN                   (A.SeqExp nil)
								| LPAREN expseq RPAREN            (A.SeqExp expseq)
								| ID LBRACE RBRACE                (A.RecordExp {fields=nil, typ=Symbol.symbol ID, pos=IDleft:pos})
								| ID LBRACE recordfields RBRACE   (A.RecordExp {fields=recordfields, typ=Symbol.symbol ID, pos=IDleft:pos})
								| lvalue ASSIGN exp               (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft:pos})
								| FOR ID ASSIGN exp TO exp DO exp (A.ForExp {var=Symbol.symbol ID, escape=ref false, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
								| BREAK                           (A.BreakExp BREAKleft)
								| LET decs IN END                 (A.LetExp {decs=decs, body=A.SeqExp nil, pos=LETleft:pos})
								| LET decs IN expseq END          (A.LetExp {decs=decs, body=A.SeqExp expseq, pos=LETleft:pos})
								| WHILE exp DO exp                (A.WhileExp {test=exp1, body=exp2, pos=exp1left:pos})
								| ID LPAREN funparams RPAREN      (A.CallExp {func = Symbol.symbol ID, args = funparams, pos= IDleft:pos})
								| ID LPAREN RPAREN                (A.CallExp {func = Symbol.symbol ID, args = nil, pos= IDleft:pos})
								| IF exp THEN exp                 (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft:pos})
								| IF exp THEN exp ELSE exp        (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft:pos})
								| ID LBRACK exp RBRACK OF exp     (A.ArrayExp {typ=Symbol.symbol ID, size=exp1, init=exp2, pos=IDleft:pos})

recordfields : ID EQ exp            ([(Symbol.symbol ID, exp, IDleft)])
						 | ID EQ exp COMMA recordfields    ((Symbol.symbol ID, exp, IDleft) :: recordfields)

funparams : exp                     ([exp])
					| exp COMMA funparams             (exp :: funparams)

expseq : exp                        ([(exp, expleft)])
			 | exp SEMICOLON expseq            ((exp, expleft) :: expseq)
